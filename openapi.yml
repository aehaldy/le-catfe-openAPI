openapi: 3.0.3
info:
  title: Catfe
  version: 1.0.0
  description: Le Catfe API Endpoints
servers:
  - url: "http://{domain}:{port}{base_path}"
    description: "API URL"
    variables:
      base_path:
        enum: [/, /api/v1]
        default: /
      domain:
        enum:
          - localhost
        default: localhost
      port:
        enum:
          - '7080'
        default: '7080'
tags:
  - name: api
  - name: menu_items
paths:
  /health:
    get:
      operationId: getHealth
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
        default:
          $ref: '#/components/responses/Error'
  /menu_items:
    get:
      description: Get all Menu Items
      operationId: getAllMenuItems
      tags:
        - menu_item
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MenuItem'
        default:
          $ref: '#/components/responses/Error'
  /cats:
    get:
      description: Get all Cats
      operationId: getAllCats
      tags:
        - cat
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        default:
          $ref: '#/components/responses/Error'
  /cats/reviews:
    post:
      summary: Post review of a Cat
      operationId: postCatReview
      tags:
        - cat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReview'
      responses:
        '201':
          description: 'Created'
        default:
          $ref: '#/components/responses/Error'
components:
  responses:
    Error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
  schemas:
    Errors:
      type: object
      required:
        - code
      properties:
        timestamp:
          type: string
          format: date-time
        msg:
          type: string
        code:
          type: number
    NewMenuItem:
      type: object
      required:
      - title
      properties:
        title:
          type: string
          maxLength: 200
          x-faker: commerce.productName
        description:
          type: string
          x-faker: lorem.paragraph
        price:
          type: string
          x-faker: commerce.price
        image_url:
          type: string
          x-faker: 
            image.food: [640, 480, 'food', true]
        id:
          type: string
          format: uuid
          x-faker: datatype.uuid
    MenuItem:
      type: object
      required:
      - title
      - id
      allOf:
      - $ref: '#/components/schemas/NewMenuItem'
    NewCat:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          maxLength: 200
          x-faker: name.firstName
        description:
          type: string
          x-faker: lorem.paragraph
        breed:
          type: string
          x-faker: animal.cat
        pairing:
          type: string
          enum: [ Pumpkin Spice Latte, Royal Milk Tea, Bubble Tea, Sencha Tea, Straight Black Coffee, Choco Cappuccino, Dirty Chai]
          example: Choco Cappuccino
        reviews:
          type: array
          items: 
            $ref: '#/components/schemas/Review'
        rating:
          type: number
          enum: [1, 2, 3, 4, 5]
          example: 4
        id:
          type: string
          format: uuid
          x-faker: datatype.uuid
    Cat:
      type: object
      required:
      - name
      - id
      allOf:
      - $ref: '#/components/schemas/NewCat'
    NewReview:
      type: object
      required:
      - author
      - rating
      - title
      - catId
      properties:
        author:
          type: string
          x-faker: internet.userName
        rating:
          type: number
          enum: [1, 2, 3, 4, 5]
          example: 4
        title:
          type: string
          maxLength: 250
          x-faker: company.catchPhrase
        comment:
          type: string
          x-faker: lorem.paragraph
        catId:
          type: string
          format: uuid
          x-faker: datatype.uuid
        id:
          type: string
          format: uuid
          x-faker: datatype.uuid
    Review:
      type: object
      required:
      - author
      - id
      allOf:
      - $ref: '#/components/schemas/NewReview'
      